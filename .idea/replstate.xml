<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1463182669154">{:repl-history {:ide [], :local [&quot;false?&quot; &quot;(+)&quot; &quot;cdsf&quot; &quot;(1)&quot; &quot;(foo 1)&quot; &quot;(board 7 7)&quot; &quot;(board 1 2)&quot; &quot;(board 10 10\n       )&quot; &quot;(board 2 2\n       )&quot; &quot;(use clojure.repl)&quot; &quot;(require clojure.repl)&quot; &quot;(require 'clojure.repl)&quot; &quot;(use 'clojure.repl)&quot; &quot;(board 1 1\n       )&quot; &quot;(board 10 10)&quot; &quot;(clojure.repl/pp)&quot; &quot;(mapv + [1 2] [3 4\n               ])&quot; &quot;(board 5 5)&quot; &quot;(board 5 5\n       )&quot; &quot;(def b (place b [0 0] 1\n              ))&quot; &quot;(piece b [0 0])&quot; &quot;(step :up [0 0])&quot; &quot;(step :up [1 1])&quot; &quot;(seek b [5 0] :up)&quot; &quot;(seek b [5 3\n         ] :up)&quot; &quot;(seek b [5 0] :left)&quot; &quot;(seek b [0 1] :left)&quot; &quot;get&quot; &quot;(place b 0 3 1)&quot; &quot;(place b [0 3] 1)&quot; &quot;(def  b (place b [0 3] 1))&quot; &quot;(pp)&quot; &quot;(valid-move? b [0 0] :down)&quot; &quot;(positions b)&quot; &quot;(get-at b [0 0])&quot; &quot;(get-in b [0 0])&quot; &quot;(occupied-positions b)&quot; &quot;(seek b [0 0] :rght)&quot; &quot;(seek b [0 0] :rghft)&quot; &quot;(seek b [0 0] :right)&quot; &quot;(seek b [0 1] :right)&quot; &quot;(seek b [0 4] :right)&quot; &quot;(def b (place b [0 0] 1))&quot; &quot;(def b (place b [0 3] 1))&quot; &quot;(valid-move? b [0 0] :right)&quot; &quot;(valid-move? b [0 2] :right)&quot; &quot;(valid-move? b [0 3] :right)&quot; &quot;(valid-move? b [0 3] :left)&quot; &quot;(step-forward :up [0 0])&quot; &quot;(step-forward :up nil)&quot; &quot;(remove-at b [0 0])&quot; &quot;(def b (board 10 10))&quot; &quot;(set-at b [0 0 ] 1)&quot; &quot;+&quot; &quot;(def r (move b [0 0] :right))&quot; &quot;r&quot; &quot;(remove-at b [0 3])&quot; &quot;\n\n(move b [0 0] :right)&quot; &quot;\n\n\n(move b [0 0] :right)&quot; &quot;\n\n\n(move b [0 0] :up)&quot; &quot;(conj [0 1] [])&quot; &quot;(conj []  [0 1])&quot; &quot;(goal? b)&quot; &quot;(valid-moves b)&quot; &quot;(move b [0 0] :right)&quot; &quot;(first (play b))&quot; &quot;(goal? nil)&quot; &quot;(valid-moves nil)&quot; &quot;(conj nil [])&quot; &quot;(when nil (println \&quot;hi\&quot;))&quot; &quot;(conj [] nil)&quot; &quot;(println nil)&quot; &quot;\n(play b)&quot; &quot;(def b (board 7 7))&quot; &quot;(def b (set-at [0 0] 1))&quot; &quot;(def b (set-at b [0 0] 1))&quot; &quot;(def b (set-at b [0 3] 1))&quot; &quot;(def b (set-at b [0 6] 1))&quot; &quot;(play b)&quot; &quot;(def b (remove-at [6 6\n                   ]))&quot; &quot;(def b (remove-at [6 6]))&quot; &quot;(def b (remove-at b [6 6]))&quot; &quot;(def b (remove-at b [0 6]))&quot; &quot;(def b (remove-at b [0 5]))&quot; &quot;(get-at b [0 6])&quot; &quot;(:pieces b)&quot; &quot;b&quot; &quot;(keys b)&quot;], :remote []}}</component>
</project>